package analisis;

//importaciones
import java_cup.runtime.Symbol;
import java.util.LinkedList;
import abstracto.Instruccion;
import simbolo.Tipo;
import simbolo.tipoDato;
import excepciones.Errores;
import java.util.HashMap;

//instrucciones
import instrucciones.Print;
import instrucciones.Declaracion;
import instrucciones.AsignacionVar;
import instrucciones.If;
import instrucciones.For;
import instrucciones.Break;
import instrucciones.Metodo;
import instrucciones.Execute;

//expresiones
import expresiones.Nativo;
import expresiones.Aritmeticas;
import expresiones.OperadoresAritmeticos;
import expresiones.Relacionales;
import expresiones.OperadoresRelacionales;
import expresiones.AccesoVar;

// parser
parser code
{:
    scanner s;
    parser(scanner s){this.s = s;}

    public LinkedList<Errores> listaErrores = new LinkedList<>();
    
    public void syntax_error(Symbol s){
        listaErrores.add(new Errores("SINTACTICO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

    public void unrecovered_syntax_error (Symbol s){
        listaErrores.add(new Errores("SINTACTICO NO RECUPERABLE",
                        "No se esperaba el componente "+s.value,
                        s.left,
                        s.right));
    }

:}

action code
{:
:}

//terminales
terminal String CADENA, ENTERO, DECIMAL, ID;
terminal FINCADENA, IMPRIMIR, INT, DOUBLE, STRING;
terminal PAR1, PAR2, MAS, MENOS, UMENOS;
terminal IGUAL, EQUALS;
terminal TRUE, FALSE, IF, BOOL;
terminal LLAVE1, LLAVE2;
terminal FOR, MENOR;
terminal String BREAK;
terminal VOID, COMA, EXECUTE;

//no terminales
nonterminal LinkedList<Instruccion> INICIO, INSTRUCCIONES;
nonterminal Instruccion INSTRUCCION;
nonterminal Instruccion IMPRESION, DECLARACION, ASIGNACION;
nonterminal Instruccion SIF;
nonterminal Instruccion CFOR, ACTUALIZA_FOR;
nonterminal Instruccion BREAKK;
nonterminal Tipo TIPOS;
nonterminal Instruccion EXPRESION;
nonterminal Instruccion METODO;
nonterminal LinkedList<HashMap> PARAMS;
nonterminal Instruccion EXECUTEE;
nonterminal LinkedList<Instruccion> PARAMSCALL;

precedence left EQUALS, MENOR;
precedence left MAS;
precedence left UMENOS;

start with INICIO;

INICIO ::= INSTRUCCIONES:a      {:   RESULT = a;   :}
;

INSTRUCCIONES ::= INSTRUCCIONES:a INSTRUCCION:b     {: RESULT = a; RESULT.add(b); :}
                | INSTRUCCION:a                   {: RESULT = new LinkedList<>(); RESULT.add(a); :}
;

INSTRUCCION ::= IMPRESION: a        {:   RESULT=a;   :}
              | DECLARACION:a       {:   RESULT=a;   :}
              | ASIGNACION:a        {:   RESULT=a;   :}
              | SIF:a               {:   RESULT=a;   :}
              | CFOR:a              {:   RESULT=a;   :}
              | BREAKK:a            {:   RESULT=a;   :}
              | METODO:a            {:   RESULT=a;   :}
              | EXECUTEE:a          {:   RESULT=a;   :}
              | error FINCADENA
;

IMPRESION ::= IMPRIMIR PAR1 EXPRESION:a PAR2 FINCADENA      {:   RESULT = new Print(a, aleft, aright);   :}
;

DECLARACION ::= TIPOS:a ID:b IGUAL EXPRESION:c FINCADENA    {:   RESULT = new Declaracion(b, c, a, aleft, aright);   :}
;

ASIGNACION ::= ID:a IGUAL EXPRESION:b FINCADENA  {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

METODO ::= TIPOS:a ID:b PAR1 PARAMS:p PAR2 LLAVE1 INSTRUCCIONES:c LLAVE2    {:   RESULT= new Metodo(b, p, c, a, aleft, aright );   :}
        |  TIPOS:a ID:b PAR1 PAR2 LLAVE1 INSTRUCCIONES:c LLAVE2             {:   RESULT= new Metodo(b, new LinkedList<HashMap>(), c, a, aleft, aright );   :}
;

PARAMS ::= PARAMS:a COMA TIPOS:b ID:c   {:  
                                            RESULT = a;
                                            var hm2= new HashMap<String, Object>();
                                            hm2.put("id", c);
                                            hm2.put("tipo", b);
                                            RESULT.add(hm2);
                                        :}
        | TIPOS:a ID:b                  {:  RESULT = new LinkedList<HashMap>(); 
                                            var hm = new HashMap<String, Object>();
                                            hm.put("id",b);
                                            hm.put("tipo", a);
                                            RESULT.add(hm);
                                        :}
;

EXECUTEE ::=  EXECUTE ID:a PAR1 PARAMSCALL:b PAR2 FINCADENA     {:   RESULT = new Execute(a, b, aleft, aright );   :}
            | EXECUTE ID:a PAR1 PAR2 FINCADENA                  {:   RESULT = new Execute(a, new LinkedList<Instruccion>(), aleft, aright );   :}
;

PARAMSCALL ::= PARAMSCALL:a COMA EXPRESION:e    {:  RESULT = a;
                                                    RESULT.add(e);
                                                :}
            | EXPRESION:a                       {:  RESULT = new LinkedList<Instruccion>(); 
                                                    RESULT.add(a);
                                                :}
;

SIF ::= IF PAR1 EXPRESION:a PAR2 LLAVE1 INSTRUCCIONES:b LLAVE2  {:   RESULT = new If(a, b, aleft, aright);   :}
;

CFOR ::= FOR PAR1 ASIGNACION:a EXPRESION:b FINCADENA ACTUALIZA_FOR:c PAR2 LLAVE1 INSTRUCCIONES:d LLAVE2     
{:   RESULT = new For(a, b, c, d, aleft, aright);   :}
;

ACTUALIZA_FOR ::= ID:a IGUAL EXPRESION:b {:   RESULT=new AsignacionVar(a, b, aleft, aright);  :}
;

BREAKK ::= BREAK:a FINCADENA      {:    RESULT = new Break(aleft, aright);     :}
;

TIPOS ::= INT       {:   RESULT=new Tipo(tipoDato.ENTERO);   :}
        | DOUBLE    {:   RESULT=new Tipo(tipoDato.DECIMAL);   :}
        | STRING    {:   RESULT=new Tipo(tipoDato.CADENA);   :}
        | BOOL      {:   RESULT=new Tipo(tipoDato.BOOLEANO);   :}
        | VOID      {:   RESULT=new Tipo(tipoDato.VOID);    :}
;

EXPRESION ::= MENOS EXPRESION:a             {:   RESULT = new Aritmeticas(a, OperadoresAritmeticos.NEGACION, aleft, aright);   :} %prec UMENOS
            | EXPRESION:a MAS EXPRESION:b   {:   RESULT = new Aritmeticas(a, b, OperadoresAritmeticos.SUMA, aleft, aright);   :}
            | EXPRESION:a IGUAL IGUAL EXPRESION:b {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.EQUALS, aleft, aright);    :}%prec EQUALS
            | EXPRESION:a MENOR EXPRESION:b     {:    RESULT = new Relacionales(a, b, OperadoresRelacionales.MENOR, aleft, aright);    :}
            | ENTERO:a      {:   RESULT = new Nativo(Integer.parseInt(a), new Tipo(tipoDato.ENTERO), aleft, aright );   :}
            | DECIMAL:a     {:   RESULT = new Nativo(new Double(a), new Tipo(tipoDato.DECIMAL), aleft, aright );   :}
            | CADENA:a      {:   RESULT = new Nativo(a, new Tipo(tipoDato.CADENA), aleft, aright );   :}
            | TRUE:a        {:   RESULT = new Nativo(true, new Tipo(tipoDato.BOOLEANO), aleft, aright );   :}
            | FALSE:a       {:   RESULT = new Nativo(false, new Tipo(tipoDato.BOOLEANO), aleft, aright );    :}
            | ID:a          {:   RESULT = new AccesoVar(a, aleft, aright);   :}
            | PAR1 EXPRESION:a PAR2     {:   RESULT = a;   :}
;